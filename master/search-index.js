var N=null,E="",T="t",U="u",searchIndex={};
var R=["A type for protecting secrets allocated on the heap.","random","usize","borrow","borrow_mut","refmut","Creates a new [`SecretVec`] with `len` elements, filled…","Returns the size in bytes of `Self`.","as_u8_ptr","Returns a `*const u8` pointer to the beginning of the data.","as_mut_u8_ptr","Returns a `*mut u8` pointer to the beginning of the data.","Types that can be safely initialized by setting their…","try_from","try_into","to_owned","clone_into","result","type_id","formatter","uninitialized","secrets::traits","Returns an uninitialized value.","as_bytes","Returns a byte slice to the underlying data.","as_mut_bytes","Returns a mutable byte slice to the underlying data.","constant_eq","Compares `self` and `rhs`. Guaranteed to return false when…","randomize","Randomizes the contents of `self`.","Zeroes out the underlying storage.","transfer","Copies all bytes from `self` into `other` before zeroing…","SecretBox","SecretVec","AsContiguousBytes","ConstantEq","Randomizable","Zeroable","Sets the page protection level of…","Instantiates a new [`Box`] that can hold `len` elements of…","secrets","A type for protecting secrets allocated on the stack.","The internal protected memory for the [`Secret`].","secrets::secret","The internal protected memory underlying the [`SecretBox`].","secrets::secret_box","The internal protected memory underlying the [`SecretVec`].","An immutable wrapper around the internal contents of a…","an imutably-unlocked reference to the protected memory of…","A mutable wrapper around the internal contents of a…","a mutably-unlocked reference to the protected memory of a…","is_empty","secrets::secret_vec","Instantiates a new `Ref`.","Instantiates a new RefMut.","Traits for types that can have their underlying storage…","A marker trait for types whose size is known at compile…","secrets::traits::bytes","Marker trait for types who are intrepretable as a series…","A marker trait for types that can be compared for equality…","secrets::traits::constant_eq","secrets::traits::randomizable","secrets::traits::zeroable","secrets::boxed","typeid","assert_receiver_is_total_eq","deref_mut","RefMut"];
searchIndex["secrets"]={"doc":"Protected-access memory for cryptographic secrets.","i":[[3,"Secret",R[42],R[43],N,N],[3,R[34],E,R[0],N,N],[3,R[35],E,R[0],N,N],[11,"new",E,"Creates a new [`Secret`] and invokes the provided callback…",0,[[["f"]]]],[11,"zero",E,"Creates a new [`Secret`] filled with zeroed bytes and…",0,[[["f"]]]],[11,"from",E,"Creates a new [`Secret`] from existing, unprotected data,…",0,[[["f"],[T]]]],[11,R[1],E,"Creates a new [`Secret`] filled with random bytes and…",0,[[["f"]]]],[11,"new",E,"Instantiates and returns a new `SecretBox`.",1,[[["f"]],["self"]]],[11,"size",E,"Returns the size in bytes of the [`SecretBox`].",1,[[["self"]],[R[2]]]],[11,R[3],E,"Immutably borrows the contents of the [`SecretBox`].…",1,[[["self"]],["ref"]]],[11,R[4],E,"Mutably borrows the contents of the [`SecretBox`]. Returns…",1,[[["self"]],[R[5]]]],[11,R[1],E,"Creates a new [`SecretBox`] filled with…",1,[[],["self"]]],[11,"zero",E,"Creates a new [`SecretBox`] filled with zeroes.",1,[[],["self"]]],[11,"new",E,"Instantiates and returns a new `SecretVec`.",2,[[[R[2]],["f"]],["self"]]],[11,"len",E,"Returns the number of elements in the [`SecretVec`].",2,[[["self"]],[R[2]]]],[11,R[53],E,"Returns true if length of the [`SecretVec`] is zero.",2,[[["self"]],["bool"]]],[11,"size",E,"Returns the size in bytes of the [`SecretVec`].",2,[[["self"]],[R[2]]]],[11,R[3],E,"Immutably borrows the contents of the [`SecretVec`].…",2,[[["self"]],["ref"]]],[11,R[4],E,"Mutably borrows the contents of the [`SecretVec`]. Returns…",2,[[["self"]],[R[5]]]],[11,R[1],E,R[6],2,[[[R[2]]],["self"]]],[11,"zero",E,R[6],2,[[[R[2]]],["self"]]],[0,"traits",E,"Marker traits to allow types to be contained as secrets.",N,N],[8,"Bytes",R[21],R[58],N,N],[11,R[20],E,R[22],3,[[],["self"]]],[11,"size",E,R[7],3,[[],[R[2]]]],[11,R[8],E,R[9],3,[[["self"]]]],[11,R[10],E,R[11],3,[[["self"]]]],[8,R[36],E,R[60],N,N],[10,"size",E,R[7],4,[[["self"]],[R[2]]]],[10,R[8],E,R[9],4,[[["self"]]]],[10,R[10],E,R[11],4,[[["self"]]]],[11,R[23],E,R[24],4,[[["self"]]]],[11,R[25],E,R[26],4,[[["self"]]]],[8,R[37],E,R[61],N,N],[11,R[27],E,R[28],5,[[["self"]],["bool"]]],[8,R[38],E,R[12],N,N],[11,R[29],E,R[30],6,[[["self"]]]],[8,R[39],E,R[12],N,N],[11,"zero",E,R[31],7,[[["self"]]]],[11,R[32],E,R[33],7,[[["self"]]]],[11,"from",R[42],E,0,[[[T]],[T]]],[11,"into",E,E,0,[[],[U]]],[11,R[13],E,E,0,[[[U]],[R[17]]]],[11,R[14],E,E,0,[[],[R[17]]]],[11,R[4],E,E,0,[[["self"]],[T]]],[11,R[3],E,E,0,[[["self"]],[T]]],[11,R[18],E,E,0,[[["self"]],[R[66]]]],[11,"from",E,E,1,[[[T]],[T]]],[11,R[15],E,E,1,[[["self"]],[T]]],[11,R[16],E,E,1,[[["self"],[T]]]],[11,"into",E,E,1,[[],[U]]],[11,R[13],E,E,1,[[[U]],[R[17]]]],[11,R[14],E,E,1,[[],[R[17]]]],[11,R[4],E,E,1,[[["self"]],[T]]],[11,R[3],E,E,1,[[["self"]],[T]]],[11,R[18],E,E,1,[[["self"]],[R[66]]]],[11,"from",E,E,2,[[[T]],[T]]],[11,R[15],E,E,2,[[["self"]],[T]]],[11,R[16],E,E,2,[[["self"],[T]]]],[11,"into",E,E,2,[[],[U]]],[11,R[13],E,E,2,[[[U]],[R[17]]]],[11,R[14],E,E,2,[[],[R[17]]]],[11,R[4],E,E,2,[[["self"]],[T]]],[11,R[3],E,E,2,[[["self"]],[T]]],[11,R[18],E,E,2,[[["self"]],[R[66]]]],[11,"from",E,"Creates a new [`SecretBox`] from existing, unprotected…",1,[[[T]],["self"]]],[11,"from",E,"Creates a new [`SecretVec`] from existing, unprotected…",2,[[],["self"]]],[11,"eq",E,E,1,[[["self"]],["bool"]]],[11,"eq",E,E,2,[[["self"]],["bool"]]],[11,"clone",E,E,1,[[["self"]],["secretbox"]]],[11,"clone",E,E,2,[[["self"]],["secretvec"]]],[11,"drop",E,E,0,[[["self"]]]],[11,"fmt",E,E,1,[[["self"],[R[19]]],[R[17]]]],[11,"fmt",E,E,2,[[["self"],[R[19]]],[R[17]]]],[11,R[20],R[21],R[22],3,[[],["self"]]],[11,"size",E,R[7],3,[[],[R[2]]]],[11,R[8],E,R[9],3,[[["self"]]]],[11,R[10],E,R[11],3,[[["self"]]]],[11,R[23],E,R[24],4,[[["self"]]]],[11,R[25],E,R[26],4,[[["self"]]]],[11,R[27],E,R[28],5,[[["self"]],["bool"]]],[11,R[29],E,R[30],6,[[["self"]]]],[11,"zero",E,R[31],7,[[["self"]]]],[11,R[32],E,R[33],7,[[["self"]]]]],"p":[[3,"Secret"],[3,R[34]],[3,R[35]],[8,"Bytes"],[8,R[36]],[8,R[37]],[8,R[38]],[8,R[39]]]};
initSearch(searchIndex);addSearchOptions(searchIndex);