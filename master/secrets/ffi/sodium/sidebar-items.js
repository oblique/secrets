initSidebarItems({"fn":[["allocarray","Allocates memory that can store `count` objects of type `T` and fills that memory with garbage bytes. Callers must ensure that they call [`sodium::free`] when this memory is no longer used."],["free","Releases memory acquired with [`sodium::allocarray`]. This function may panic if it detects that certain soundness and safety guarantees have been violated (e.g., an underflowing write)."],["init","Initialized libsodium. This function must be called at least once prior to using any of the other functions in this library, and callers must verify that it returns `true`. If it returns `false`, libsodium was unable to be properly set up and this library must not be used."],["memcmp","Compares `l` and `r` for equality in constant time, preventing side-channel attacks when comparing equality of secret data."],["memrandom","Fills `bytes` with random bytes."],["memtransfer","Copies bytes from `src` to `dst` before zeroing the bytes in `src`. `dst` must be at least as long as `src` and must not overlap `src`."],["memzero","Fills `bytes` with zeroes."],["mlock","Calls the platform's underlying `mlock(2)` implementation."],["mprotect_noaccess","Sets the page protection level of [`sodium::allocarray`]-allocated memory to `PROT_NONE`. This must be used in lieu of a raw call to `mprotect` which is unaware of the specific allocation pattern used by libsodium."],["mprotect_readonly","Sets the page protection level of [`sodium::allocarray`]-allocated memory to `PROT_READ`. This must be used in lieu of a raw call to `mprotect` which is unaware of the specific allocation pattern used by libsodium."],["mprotect_readwrite","Sets the page protection level of [`sodium::allocarray`]-allocated memory to `PROT_WRITE`. This must be used in lieu of a raw call to `mprotect` which is unaware of the specific allocation pattern used by libsodium."],["munlock","Calls the platform's underlying `munlock(2)` implementation."],["randombytes_buf",""],["sodium_allocarray",""],["sodium_free",""],["sodium_init",""],["sodium_memcmp",""],["sodium_memzero",""],["sodium_mlock",""],["sodium_mprotect_noaccess",""],["sodium_mprotect_readonly",""],["sodium_mprotect_readwrite",""],["sodium_munlock",""]],"static":[["INIT","The global [`sync::Once`] that ensures we only perform library initialization one time."],["INITIALIZED","A flag that returns whether or not this library has been safely initialized."]]});